--- HTMLCOIN_orig/src/miner.cpp	2019-02-06 13:21:56.549279606 +0900
+++ HTMLCOIN/src/miner.cpp	2019-02-06 13:19:44.065915612 +0900
@@ -272,7 +272,7 @@ std::unique_ptr<CBlockTemplate> BlockAss
     pblock->nTime = txProofTime;
     if (!fProofOfStake)
         UpdateTime(pblock, chainparams.GetConsensus(), pindexPrev);
-    pblock->nBits = GetNextWorkRequired(pindexPrev, pblock, chainparams.GetConsensus(),fProofOfStake);
+    pblock->nBits = GetNextWorkRequired(pindexPrev, pblock, chainparams.GetConsensus(),false);
     const int64_t nMedianTimePast = pindexPrev->GetMedianTimePast();
 
     nLockTimeCutoff = (STANDARD_LOCKTIME_VERIFY_FLAGS & LOCKTIME_MEDIAN_TIME_PAST)
--- HTMLCOIN_orig/src/rpc/mining.cpp	2019-02-06 13:21:56.449279904 +0900
+++ HTMLCOIN/src/rpc/mining.cpp	2019-02-06 13:27:04.936421519 +0900
@@ -933,10 +933,20 @@ UniValue getblocktemplate(const JSONRPCR
         aMutable.push_back("version/force");
     }
 
+    UniValue coinbasevalues(UniValue::VARR);
+    for (const auto& it : pblock->vtx[1]->vout) {
+        UniValue entry(UniValue::VOBJ);
+        entry.push_back(Pair("nValue", (int64_t)it.nValue));
+        entry.push_back(Pair("scriptPubKey", HexStr(it.scriptPubKey)));
+        coinbasevalues.push_back(entry);
+    }
+    //LogPrintf("pblock: %s", pblock->ToString().c_str());
+
     result.push_back(Pair("previousblockhash", pblock->hashPrevBlock.GetHex()));
     result.push_back(Pair("transactions", transactions));
     result.push_back(Pair("coinbaseaux", aux));
     result.push_back(Pair("coinbasevalue", (int64_t)pblock->vtx[0]->vout[0].nValue));
+    result.push_back(Pair("coinbasevalues", coinbasevalues));
     result.push_back(Pair("longpollid", chainActive.Tip()->GetBlockHash().GetHex() + i64tostr(nTransactionsUpdatedLast)));
     result.push_back(Pair("target", hashTarget.GetHex()));
     result.push_back(Pair("mintime", (int64_t)pindexPrev->GetMedianTimePast()+1));
